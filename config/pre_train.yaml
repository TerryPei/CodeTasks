port: 20052
model:
    #backbone:
    backbone:
        init_stem: [1, 3, 768, [], []]
        Block: [13, 768, 2880, 2880, []]
        Norm: [1, 768, [], 'token', ['Norm']]
        FC: [1, 768, 1000, [], ['FC']]
    depth: [13]
    depth_final: [2]
    ViT_type: 'ViT'
    drop_path_rate: 0.0

# search:
#     flag: False
#     #statistic_flops: True
#     # searcher:
#     #     type: ['uniform']
#     #     start_iter: [0]

#     strategy:
#         max_epochs: 300
#         optimizer:
#             type: 'SGD'
#             lr: 0.001
#             weight_decay: 0
#         # lr_scheduler:
#         #     base_lr: 0.12
#         #     lr_steps: [50080, 100160, 125200]
#         #     lr_mults: [0.1, 0.1, 0.1]
#         #     warmup_steps: 0channel_percent
#         #     warmup_strategy: 'gradual'
#         #     warmup_lr: 0.2
#         #     decay_stg: 'cosine'
#         #     # final lr in cosine strategy
#         #     alpha: 0.
#         #     # how many iterations it takes to decay lr to 'alpha'
#         #     decay_step: 150000
#         kwargs:
#             search: True
#             channel_percent: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#             side_scheme: 'BCNet'    # ['AutoSlim', 'BCNet']
#             ViT_type: 'ViT'
#             depth_final: [2]
#             depth_last: [13]
#             mix_up: False
#             warm_up: 5

#         task_type: 'imagenet'
#         snapshot_freq: 10000
#         print_freq: 20
#         resume: True
#         save_path: '../generalNAS_exp/ViT_AutoFormer_S'
#         load_name: 'recent_ckpt.pth.tar'

#     data:
#         workers: 8  # dataloader worker num
#         task_type: 'imagenet'
#         # data_type: 'ssst'
#         # scatter_mode: False
#         # final_height: 224
#         # final_width: 224
#         # final_channel: 3
#         augmentation: 'deit_xaa_xcj_era'
#         batch_size: 1024
#         # imagenet:
#         #     type: 'classification'
#         #     task: 'imagenet'
#         #     json_path: '/mnt/lustre/suxiu/dataset/imagenet/imagenet.json'
#         #     prefix: '/mnt/lustre/share/images/train'
#         #     batch_size: 128 # for single gpu

# sample:
#     flag: False
#     sampler:
#         type: 'evolution'
#         kwargs:
#             depth_final: [2]
#             depth_last: [13]
#             init_pop: True
#             pop_size: 40
#             n_gens: 80
#             sample_num: 10
#             cal_train_mode: True
#             flops_constraint: 5000000000
#             flops_min: 4600000000
#             channel_percent: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
#             side_scheme: 'BCNet'
#     strategy:
#         task_type: 'imagenet-test'
#         snapshot_freq: 2000
#         print_freq: 20
#         save_path: None #'../generalNAS_exp/imagenet_proxyless_search_uniform_shar0.2_bs128'
#         load_name: 'epoch_299_ckpt.pth.tar'

#     data:
#         workers: 8  # dataloader worker num
#         task_type: 'imagenet-test'
#         augmentation: False
#         # data_type: 'ssst'
#         # scatter_mode: False
#         # final_height: 224
#         # final_width: 224
#         # final_channel: 3
#         # augmentation:
#         #     # resize
#         #     resize:
#         #         output_size: 256
#         #     center_crop:
#         #         output_size: 224
#         #     # normalize
#         #     normalize:
#         #         normalize_type: 'mean_std'
#         #         mean: [123.675, 116.28, 103.53]
#         #         std: [58.395, 57.120, 57.375]
#         batch_size: 1024 # for single gpu
#         # imagenet:
#         #     type: 'classification'
#         #     task: 'imagenet'
#         #     json_path: '/mnt/lustre/suxiu/dataset/imagenet/imagenet_val.json'
#         #     prefix: '/mnt/lustre/share/images/val'


retrain:
    flag: True
    # FLOPs: 333,598,784 FLOPs
    model:
        backbone:
            init_stem: [1, 3, 384, [], ['Patch_init_16']]
            Block_1: [1, 384, 1152, 1152, ['Block_h3']] #3.0
            Block_2: [1, 384, 1152, 1344, ['Block_h3']] #3.5
            Block_3: [1, 384, 1152, 1152, ['Block_h3']] #3.0
            Block_4: [1, 384, 1152, 1344, ['Block_h3']] #3.5
            Block_5: [3, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_6: [2, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_7: [2, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_8: [1, 384, 1152, 1344, ['Block_h3']] #4.0
            Block_9: [1, 384, 1152, 1536, ['Block_h3']] #4.0
            Norm: [1, 384, [], 'token', ['Norm']]
            FC: [1, 384, 1000, [], ['FC']]
        is_retrain: True
        net_id: '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'
        channel_percent: [1.0]
        depth_final: [1]
        depth_last: [13]
        id_locate: 0
        model_len: 16
        ViT_type: 'ViT'
        drop_path_rate: 0.1
        depth: [13]
        is_retrain: True


        # backbone:
        #     init_stem: [1, 3, [16], [], 384, [], [], True, ['Patch_init']]
        #     Block_1: [1, 384, [6], 1152, 384, 1152, 384, True, ['Block_6']] #3.0
        #     Block_2: [1, 384, [6], 1152, 384, 1344, 384, True, ['Block_6']] #3.5
        #     Block_3: [1, 384, [5], 1152, 384, 1152, 384, True, ['Block_5']] #3.0
        #     Block_4: [1, 384, [5], 1152, 384, 1344, 384, True, ['Block_7']] #3.5
        #     Block_5: [3, 384, [5], 1152, 384, 1536, 384, True, ['Block_5']] #4.0
        #     Block_6: [2, 384, [5], 1152, 384, 1536, 384, True, ['Block_6']] #4.0
        #     Block_7: [2, 384, [5], 1152, 384, 1536, 384, True, ['Block_7']] #4.0
        #     Block_8: [1, 384, [5], 1152, 384, 1344, 384, True, ['Block_6']] #4.0
        #     Block_9: [1, 384, [5], 1152, 384, 1536, 384, True, ['Block_7']] #4.0
        #     Norm: [1, 384, [], [], [], [], [], 'token', ['Norm']]
        #     FC: [1, 384, [], [], 1000, [], [], False, ['FC']]
        # drop_path_rate: 0.1
        # depth: 13



        #     init_stem: [1, 3, [14, 16, 32], [], 384, [], [], True, ['Patch_init']]
        #     Block: [12, 384, [3, 6, 12, 16], 1440, 384, 1440, 384, True, ['Block', 'id']]
        #     Norm: [1, 384, [], [], [], [], [], 'token', ['Norm']]
        #     FC: [1, 384, [], [], 1000, [], [], False, ['FC']]
        # net_id: '1 4 4 4 0 2 0 4 4 3 3 4 2 0 0 5 0 1 6 5 9 9 4 7 6 4 0 3 5 6 7 0 4 9 7 4 6 8 0 1'
        # channel_percent: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
        # model_len: 15
        # drop_path_rate: 0.1
        # depth: 12
        



    strategy:
        max_epochs: 300
        optimizer:
            # type: 'SGD'
            lr: 0.001
            weight_decay: 0.05
            # momentum: 0.9
            # nesterov: True

        kwargs:
            search: False
            mix_up: True
            warm_up: 5
        # lr_scheduler:
        #     #base_lr: 0.12
        #     lr_steps: [50080, 100160, 125200]
        #     lr_mults: [0.1, 0.1, 0.1]
        #     warmup_steps: 0
        #     warmup_strategy: 'gradual'
        #     warmup_lr: 0.2
        #     decay_stg: 'cosine'
        #     # final lr in cosine strategy
        #     alpha: 0.
        #     # how many iterations it takes to decay lr to 'alpha'
        #     decay_step: 370000

        task_type: 'imagenet'
        snapshot_freq: 2000
        print_freq: 20
        resume: True
        save_path: None #'../generalNAS_exp/imagenet_proxyless_mobile'
        load_name: 'recent_ckpt.pth.tar'

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet'
        # data_type: 'ssst'
        # scatter_mode: False
        # final_height: 224
        # final_width: 224
        # final_channel: 3
        augmentation: 'deit'
            # rand_resize:
            #     output_size: 224
            #     scale: [0.08, 1.0]
            #     ratio: [0.75, 1.33]
            # affine:
            #     mirror:
            #         mirror_prob: 0.5
            # # resize
            # resize:
            #     output_size: [224, 224]
            # # normalize
            # normalize:
            #     normalize_type: 'mean_std'
            #     mean: [123.675, 116.28, 103.53]
            #     std: [58.395, 57.120, 57.375]
        batch_size: 1024
        # imagenet:
        #     type: 'classification'
        #     task: 'imagenet'
        #     json_path: '/mnt/lustre/share_data/huangtao/dataset/imagenet/imagenet.json'
        #     prefix: '/mnt/lustre/share/images/train'
        #     batch_size: 128 # for single gpu

test:
    flag: True
    model:
        backbone:
            init_stem: [1, 3, 384, [], ['Patch_init_16']]
            Block_1: [1, 384, 1152, 1152, ['Block_h3']] #3.0
            Block_2: [1, 384, 1152, 1344, ['Block_h3']] #3.5
            Block_3: [1, 384, 1152, 1152, ['Block_h3']] #3.0
            Block_4: [1, 384, 1152, 1344, ['Block_h3']] #3.5
            Block_5: [3, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_6: [2, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_7: [2, 384, 1152, 1536, ['Block_h3']] #4.0
            Block_8: [1, 384, 1152, 1344, ['Block_h3']] #4.0
            Block_9: [1, 384, 1152, 1536, ['Block_h3']] #4.0
            Norm: [1, 384, [], 'token', ['Norm']]
            FC: [1, 384, 1000, [], ['FC']]
        is_retrain: True
        net_id: '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'
        channel_percent: [1.0]
        depth_final: [1]
        depth_last: [13]
        id_locate: 0
        model_len: 16
        ViT_type: 'ViT'
        drop_path_rate: 0.1
        depth: [13]
        is_retrain: True

        
